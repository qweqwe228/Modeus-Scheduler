# bot.py
import asyncio
import json
import logging
import os
import re
from collections import defaultdict
from html import escape
from typing import List, Dict, Any

from telegram import Update, InputFile
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

from config import BOT_TOKEN, SESSIONS_DIR
from schedule_filter import generate_filters, apply_filters, apply_filters_to_list
from schedule_generator import generate_schedules
from utils import create_user_session, cleanup_user_session

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–µ—Å–µ–¥—ã
UPLOADING, FILTERING, REVIEWING = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    user = update.message.from_user
    logger.info(f"–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏
    cleanup_user_session(user.id)
    create_user_session(user.id)
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n\n"
        "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤—Å–µ JSON-—Ñ–∞–π–ª—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ /done.\n\n"
        "‚ùó –í–∞–∂–Ω–æ: –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ "
        "—Å —Ä–∞–∑–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏.\n\n"
        "-----------------------------------\n\n"
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –¥–µ–º–æ-–≤–∞—Ä–∏–∞–Ω—Ç–∞:\n\n"
        "https://drive.google.com/drive/folders/1qNJ8Opc5M2NMcnF-rMag1-RW3lLMytWJ\n\n"
        "-----------------------------------\n\n"
        "(–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)"
    )
    return UPLOADING

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    user = update.message.from_user
    document = update.message.document

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not document.file_name.lower().endswith('.json'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ JSON-—Ñ–∞–π–ª—ã.")
        return UPLOADING

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if document.file_size > 2 * 1024 * 1024:  # 2 MB
        await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 2 –ú–ë.")
        return UPLOADING

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    input_dir = f"{SESSIONS_DIR}/{user.id}/input_schedules"
    os.makedirs(input_dir, exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    file = await context.bot.get_file(document.file_id)
    file_path = os.path.join(input_dir, document.file_name)
    await file.download_to_drive(file_path)

    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª {document.file_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! "
        "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏."
    )

    try:
        with open(file_path, 'r', encoding='utf-8-sig') as f:
            json.load(f)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
    except json.JSONDecodeError:
        os.remove(file_path)
        await update.message.reply_text("‚ùå –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-—Ñ–∞–π–ª.")
    return UPLOADING

async def done_uploading(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤."""
    user = update.message.from_user
    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")

    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è {user.id}")
        await update.message.reply_chat_action(action="typing")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            count = await asyncio.wait_for(
                asyncio.to_thread(generate_schedules, user.id),
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
        except asyncio.TimeoutError:
            await update.message.reply_text(
                "‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –≤ —Ñ–∞–π–ª–∞—Ö –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /start"
            )
            return ConversationHandler.END

        if count == 0:
            await update.message.reply_text(
                "üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∏–ª–∏ –æ–Ω–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã\n"
                "‚Ä¢ –í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è—Ö –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≥—Ä—É–ø–ø\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /start"
            )
            return ConversationHandler.END

        await update.message.reply_text(
            f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {count} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π!\n\n"
            "üìù –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å?\n"
            "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            "‚Ä¢ '–ù–µ —Ö–æ—á—É –ø–∞—Ä –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'\n"
            "‚Ä¢ '–ü–∞—Ä—ã —Ç–æ–ª—å–∫–æ –¥–æ 16 —á–∞—Å–æ–≤'\n"
            "‚Ä¢ '–•–æ—á—É —á—Ç–æ–±—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –≤–µ–ª –ò–≤–∞–Ω–æ–≤'\n"
            "‚Ä¢ '–ò—Å–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ü–µ—Ç—Ä–æ–≤–∞'"
        )
        return FILTERING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
        await update.message.reply_text("üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ /start")
        return ConversationHandler.END

async def handle_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."""
    user = update.message.from_user
    user_input = update.message.text

    try:
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è...")
        await update.message.reply_chat_action(action="typing")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        is_adjustment = context.user_data.get('is_adjustment', False)
        is_exclusion = context.user_data.get('is_exclusion', False)
        
        # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
        if is_adjustment:
            original_query = context.user_data.get('original_query', "")
            full_query = f"{original_query}. {user_input}"
        elif is_exclusion:
            # –î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            full_query = f"–ò—Å–∫–ª—é—á–∏ –≥—Ä—É–ø–ø—É: {user_input}"
        else:
            full_query = user_input
            context.user_data['original_query'] = user_input

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters_data = generate_filters(full_query)
        
        # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        if is_adjustment or is_exclusion:
            prev_filters = context.user_data.get('current_filters', {})
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            merged_filters = {}
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            for key, value in prev_filters.items():
                if not isinstance(value, (list, dict)):
                    merged_filters[key] = value
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            for key, value in filters_data.items():
                if not isinstance(value, (list, dict)):
                    merged_filters[key] = value
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
            for key in set(prev_filters.keys()) | set(filters_data.keys()):
                merged_list = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if key in prev_filters and isinstance(prev_filters[key], list):
                    for item in prev_filters[key]:
                        # –î–ª—è —Å–ª–æ–≤–∞—Ä–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                        if isinstance(item, dict):
                            merged_list.append(tuple(sorted(item.items())))
                        else:
                            merged_list.append(item)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if key in filters_data and isinstance(filters_data[key], list):
                    for item in filters_data[key]:
                        if isinstance(item, dict):
                            merged_list.append(tuple(sorted(item.items())))
                        else:
                            merged_list.append(item)
                
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                if merged_list:
                    unique_list = []
                    seen = set()
                    for item in merged_list:
                        if item not in seen:
                            seen.add(item)
                            unique_list.append(item)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–∏
                    final_list = []
                    for item in unique_list:
                        if isinstance(item, tuple):
                            final_list.append(dict(item))
                        else:
                            final_list.append(item)
                    
                    merged_filters[key] = final_list
            
            filters_data = merged_filters

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if is_adjustment or is_exclusion:
            # –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
            previous_matched = context.user_data.get('matched_schedules', [])
            matched_count = apply_filters_to_list(
                user.id, 
                filters_data, 
                previous_matched
            )
        else:
            # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º
            matched_count = apply_filters(user.id, filters_data)
        
        # –ü–æ–ª—É—á–∞–µ–º matched_schedules
        matched_schedules = _get_matched_schedules(user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        context.user_data['matched_schedules'] = matched_schedules
        context.user_data['total_count'] = matched_count
        context.user_data['current_filters'] = filters_data
        context.user_data['shown_index'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–∫–∞–∑–∞
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await _send_schedules_message(
            update=update,
            context=context,
            schedules=matched_schedules,
            start_index=0,
            limit=3,
            total_count=matched_count
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return REVIEWING

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ.")
        return FILTERING


def _get_matched_schedules(user_id: int) -> List[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    matched_file = f"{SESSIONS_DIR}/{user_id}/matched_schedules.json"
    
    try:
        with open(matched_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get("matched_schedules", [])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
        return []

async def _send_schedules_message(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    schedules: List[dict],
    total_count: int,
    start_index: int = 0,
    limit: int = 3
) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        end_index = min(start_index + limit, len(schedules))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        header = (
            f"<b>üéØ –ù–∞–π–¥–µ–Ω–æ {total_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–ø–æ–∫–∞–∑–∞–Ω—ã {start_index+1}-{end_index}):</b>\n\n"
            "–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"
            "1. <b>–ü—Ä–µ–¥–º–µ—Ç</b> (–≥—Ä—É–ø–ø–∞)\n"
            "2. <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</b>\n"
            "3. <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )
        await update.message.reply_text(header, parse_mode=ParseMode.HTML)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        for i, schedule in enumerate(schedules[start_index:end_index], start_index+1):
            try:
                subjects = defaultdict(lambda: {'groups': set(), 'teachers': set()})
                days = defaultdict(list)
                
                for subject in schedule["–ø—Ä–µ–¥–º–µ—Ç—ã"]:
                    name = clean_text(subject["–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–µ–¥–º–µ—Ç–∞"])
                    raw_group = subject["–≥—Ä—É–ø–ø–∞"]
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
                    if "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" in name.lower():
                        group = extract_english_group(str(raw_group))
                    else:
                        group = clean_text(raw_group)
                    
                    subjects[name]['groups'].add(group)
                    
                    for cls in subject["–∑–∞–Ω—è—Ç–∏—è"]:
                        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
                        for teacher in cls["–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"]:
                            if teacher.strip():
                                subjects[name]['teachers'].add(clean_text(teacher))
                        
                        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        day = clean_text(cls.get("–¥–µ–Ω—å", "")).lower()
                        time = clean_text(cls.get("–≤—Ä–µ–º—è", "??:??")).replace("‚Äì", "-")
                        lesson_type = clean_text(cls.get("—Ç–∏–ø_–∑–∞–Ω—è—Ç–∏—è", ""))
                        
                        if day and time:
                            days[day].append(f"{time} {name} (–≥—Ä. {group}, {lesson_type})")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = [
                    f"<b>üìã –í–∞—Ä–∏–∞–Ω—Ç {i}:</b>",
                    "<b>üìö –ü—Ä–µ–¥–º–µ—Ç—ã:</b>"
                ]
                
                # –ü—Ä–µ–¥–º–µ—Ç—ã –∏ –≥—Ä—É–ø–ø—ã
                for name, data in subjects.items():
                    groups = ", ".join(sorted(data['groups']))
                    message.append(f"‚Ä¢ <b>{name}</b> ({groups})")
                
                # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
                message.append("\n<b>üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:</b>")
                for name, data in subjects.items():
                    teachers = ", ".join(sorted(data['teachers'])) if data['teachers'] else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
                    message.append(f"‚Ä¢ <b>{name}</b>: {teachers}")
                
                # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                message.append("\n<b>üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>")
                for day in ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]:
                    if day in days:
                        message.append(f"\n‚ñ∏ <b>{day.capitalize()}:</b>")
                        for lesson in sorted(days[day]):
                            message.append(f"   ‚Ä£ {lesson}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                full_msg = "\n".join(message)
                if len(full_msg) > 4000:
                    for part in [full_msg[i:i+4000] for i in range(0, len(full_msg), 4000)]:
                        await update.message.reply_text(part, parse_mode=ParseMode.HTML)
                else:
                    await update.message.reply_text(full_msg, parse_mode=ParseMode.HTML)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è #{i}: {e}")
                continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
        context.user_data['shown_index'] = end_index
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏
        footer = (
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "‚Ä¢ /next - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 3 —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            "‚Ä¢ /adjust - –£—Ç–æ—á–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ /exclude - –ò—Å–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
            "‚Ä¢ /new - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
        )
        await update.message.reply_text(footer, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
            parse_mode=ParseMode.HTML
        )

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤."""
    if not text:
        return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    return escape(str(text).strip())

def extract_english_group(group: str) -> str:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞."""
    group = str(group).upper().replace(" ", "")
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è "CP" (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞)
    cp_patterns = [
        r"(–°–†|CP)[-_]?\d{2,3}",  # –°–†-15, CP17, –°–†_05
        r"\d{2,3}/\d{2,3}",       # 15/17
        r"(?<=–°–†|CP)\d{2,3}",     # –°–†15, CP05
    ]
    
    for pattern in cp_patterns:
        match = re.search(pattern, group)
        if match:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç: CP-XX
            found = match.group()
            if "/" in found:
                return f"CP-{found.split('/')[0]}"
            elif "_" in found:
                return found.replace("_", "-")
            elif not "-" in found and any(c.isalpha() for c in found):
                nums = re.sub(r"\D", "", found)
                prefix = "CP" if "CP" in found else "–°–†"
                return f"{prefix}-{nums}"
            return found
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã
    numbers = re.search(r"\d{2,3}", group)
    return f"CP-{numbers.group()}" if numbers else "CP-?"

async def next_schedules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user = update.message.from_user
    user_data = context.user_data
    
    shown_index = user_data.get('shown_index', 0)
    matched_schedules = user_data.get('matched_schedules', [])
    total_count = user_data.get('total_count', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if shown_index >= len(matched_schedules):
        await update.message.reply_text("‚ÑπÔ∏è –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.")
        return REVIEWING
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 3 —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    await _send_schedules_message(
        update=update,
        context=context,
        schedules=matched_schedules,
        start_index=shown_index,
        limit=3,
        total_count=total_count
    )
    
    return REVIEWING

async def adjust_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
    context.user_data['is_adjustment'] = True
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n"
        "–ü—Ä–∏–º–µ—Ä: '–ò –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–∞—Ä –ø–æ—Å–ª–µ 17:00'"
    )
    return FILTERING

async def exclude_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    context.user_data['is_exclusion'] = True
    await update.message.reply_text(
        "üö´ –í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ü—Ä–µ–¥–º–µ—Ç –ì—Ä—É–ø–ø–∞\n"
        "–ü—Ä–∏–º–µ—Ä: '–í–µ–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ê–¢-03'\n\n"
        "‚ùó –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
        "–ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, –≤–≤–æ–¥–∏—Ç–µ –µ–≥–æ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º"
    )
    return FILTERING

async def new_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã."""
    user = update.message.from_user
    cleanup_user_session(user.id)
    context.user_data.clear()
    await update.message.reply_text("üóëÔ∏è –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start.")
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    error = context.error
    logger.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", exc_info=error)
    
    if isinstance(error, json.JSONDecodeError):
        msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã."
    else:
        msg = "üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start"
    
    if update and hasattr(update, 'message'):
        await update.message.reply_text(msg)

    if isinstance(error, TypeError) and "unhashable type" in str(error):
        msg = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
        await update.message.reply_text(msg)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(SESSIONS_DIR, exist_ok=True)

    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            UPLOADING: [
                MessageHandler(filters.Document.ALL, handle_document),
                CommandHandler('done', done_uploading)
            ],
            FILTERING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_preferences)
            ],
            REVIEWING: [
                CommandHandler('next', next_schedules),
                CommandHandler('adjust', adjust_query),
                CommandHandler('exclude', exclude_group),
                CommandHandler('new', new_search),
                CommandHandler('cancel', cancel)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == '__main__':
    main()